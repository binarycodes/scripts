#!/usr/bin/env python
# -*- coding: utf-8 -*-

import hashlib
import os
import sys

__author__ = "Sujoy <binarycodes> (sujoy@archlinux.us)"


class mymd5(object):
    """
    Re-implementation of md5sum in python
    """
    
    def __init__(self):
        """docstring for __init__"""
        pass
    
    def md5file(self, filename):
        """
        Return the hex digest of a file without loading it all into memory
        """
        fh = open(filename,'r+b')
        digest = hashlib.md5()
        buf = fh.read(4096)
        while buf :
            digest.update(buf) #.encode('utf-16'))
            buf = fh.read(4096)
        fh.close()
        del fh
        return digest.hexdigest()
    
    def md5list(self, files):
        md5_list = []
        for filename in files:
            try:
                md5_list.append((self.md5file(filename), filename))
            except IOError as e:
                print("%s: %s: %s" % (os.path.basename(__file__), filename, e.strerror), file=sys.stderr)
                continue
        return md5_list

    def md5dir(self,dirname):
        """
        return a pair containing filename and md5sum for each file in the dir, and files in its subdirs
        recursive process
        """
        md5_list = []
        for root, dirs, files in os.walk(dirname):
            if files != []:
                for filename in files:
                    fn = os.path.join(root,filename)
                    md5_list.append((self.md5file(fn), fn))
        return md5_list

if __name__ == "__main__":
    md = mymd5()
    data_list = md.md5list(sys.argv[1:])
    for data in data_list:
        print ('{0}  {1}'.format(data[0],data[1]))
