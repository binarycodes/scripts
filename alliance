#!/bin/sh

## lock file path
LOCK_FILE=/tmp/alliance.pid

## read encrypted data set
export $(gpg --decrypt /etc/conf.d/alliance.data.gpg 2>/dev/null)


##------------------------------------------------------------------------------
## setting up traps
##------------------------------------------------------------------------------

trap exit_on_signal SIGINT SIGTERM

exit_on_signal() {
    echo "Script interrupted" 2>&1
    rm "$LOCK_FILE"
    exit 1
}

##------------------------------------------------------------------------------
## end setting up trap
##------------------------------------------------------------------------------


##------------------------------------------------------------------------------
## start of functions
##------------------------------------------------------------------------------

iface_up () {
    if (( UID != 0 )); then
        echo "error: you cannot perform this operation unless you are root." 1>&2
    else
        iface_down

        ip link set dev eth0 up
        ip addr add $ALLIANCE_IP/$ALLIANCE_NETMASK broadcast '+' dev eth0

        ip route add default via $ALLIANCE_GATEWAY

        echo "nameserver $ALLIANCE_DNS1" > /etc/resolv.conf
        echo "nameserver $ALLIANCE_DNS2" >> /etc/resolv.conf
    fi
}

iface_down () {
    ip addr flush dev eth0
    ip link set dev eth0 down
}

all_login () {
    if (( UID == 0 )); then
        echo "error: you cannot perform this operation as root." 1>&2
    else
        gateway_response
        if (( $? == 1 )); then
            curl -s --cookie cjar  --data "user=$ALLIANCE_USERNAME" \
                --data "pass=$ALLIANCE_PASSWORD" \
                --data 'login=Login' $ALLIANCE_LOGIN_PAGE >/dev/null
            if [[ ! -z $TERM ]]; then
                local user_agent="Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3"

                local ip=$(curl -sA $user_agent http://whatismyipaddress.com/ | \
                    grep "LOOKUPADDRESS" | \
                    sed 's/.*value="\([0-9.]*\).*/\1/')
                if [[ -z $ip ]]; then
                    echo "error connecting to network" 1>&2
                else
                    echo "IP :: $ip"
                fi
            fi
        else
            echo "error: no response from gateway :: ${ALLIANCE_GATEWAY}"
        fi
    fi
}

all_logout () {
    if (( UID == 0 )); then
        echo "error: you cannot perform this operation as root."
    else
        curl -sF 'logout=1' $ALLIANCE_LOGIN_PAGE
    fi
}

all_expiry () {
    local expiry=$(curl -s $ALLIANCE_LOGIN_PAGE | \
        grep "Expiry date" | \
        sed -re 's/.*left">([0-9.]*)<span.*/\1/' \
        -e 's/([0-9]*).([0-9]*).([0-9]*)/\2\/\1\/\3/')
    local package_name=$(curl -s http://10.13.1.1/0/up/ | \
        grep "Package" | sed -re 's/.*left">([a-zA-z]+).*/\1/')
    if [[ -z $expiry ]]; then
        echo "error connecting to network" 1>&2
    else
        local expiry_date=$(date --date "$expiry" +"%d-%b-%Y")
        local expiry_epoch=$(date -d $expiry_date +%s)
        local today_epoch=$(date -d $(date +%D) +%s)
        local days_left=$(($(($expiry_epoch - $today_epoch)) / 86400))
        if (($days_left <= 2)); then
            send_expiry_mail $package_name $expiry_date
        fi
        echo "Package $package_name subscription expires on $expiry_date"
    fi
}


send_expiry_mail(){
    # expected $1 - package name
    # expected $2 - expiry date
    echo "sending email ..."
    msmtp -t <<EOF
From: $FROM_EMAIL_ADDRESS
To: $TO_EMAIL_ADDRESS
Cc: $CC_EMAILS
Subject: Alliance subscription expires on $2


Alliance subscription for package $1 expires on $2
Contact $ALLIANCE_CONTACT_NAME $ALLIANCE_CONTACT_CELL for renewal.

--
$(hostname | tr '[:lower:]' '[:upper:]')
EOF
}

gateway_response () {
    local ping_response=$(ping -c1 $ALLIANCE_GATEWAY | grep "1 received" -c)
    return $ping_response
}



usage () {
    cat <<EOF
    Usage:   $(basename $0) [options]

    Basic options:
    -s        setup network connection
    -l        login to alliance network [default]
    -x        logout from alliance network
    -e        print expiry date to STDOUT
    -h        show help
EOF
}

error_exit () {
    usage
    rm "$LOCK_FILE"
    exit 1
}

##------------------------------------------------------------------------------
## end of functions
##------------------------------------------------------------------------------

if [[ -e "$LOCK_FILE" ]]; then
    echo "another instance is still active ... $(<$LOCK_FILE)" 1>&2
    echo "if you are sure another instance is not up, you can remove ${LOCK_FILE}"
else
    # creating the lock file
    echo "$$" > "$LOCK_FILE"

    # main execution
    while getopts ":sxleh" opt; do
        case $opt in
            s)
                iface_up
                ;;
            x)
                all_logout
                ;;
            l)
                all_login
                ;;
            e)
                all_expiry
                ;;
            h)
                usage
                ;;
            \?)
                echo "invalid option: -$OPTARG" >&2
                error_exit
                ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                error_exit
                ;;
        esac
    done

    if (( $# == 0 )); then
        all_login
    fi

    ## removing lock
    rm "$LOCK_FILE"
fi
