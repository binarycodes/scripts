#!/bin/bash

##------------------------------------------------------------------------------
## setting up traps
##------------------------------------------------------------------------------

trap exit_on_signal SIGINT SIGTERM

exit_on_signal() {
    echo "Script interrupted" 2>&1
    exit 1
}

##------------------------------------------------------------------------------
## end setting up trap
##------------------------------------------------------------------------------


declare -a rename_patterns=("y/A-Z/a-z/"
    "s/^([\(\[\{]|[\)\]\}])//g"
    "s/([\(\[\{]|[\)\]\}])/./g"
    "s/^\s+//g"
    "s/\s+/\./g"
    "s/^\_+//g"
    "s/\_+/\./g"
    "s/^\,+//g"
    "s/\,+/\./g"
    "s/^\-+//g"
    "s/\-+/\./g"
    "s/^\=+//g"
    "s/\=+/\./g"
    "s/~//g"
    "s/:/./g"
    "s/\'//g"
    "s/\.+/\./g"
    "s/\.$//g")


##------------------------------------------------------------------------------
## start of functions
##------------------------------------------------------------------------------

function rename_with_patterns() {
    local newName="$1"
    if [[ -z "$newName" ]]; then
        echo "argument expected." 1>&2
    else
        echo "processing file ${newName}"
        for i in "${rename_patterns[@]}"
        do
            local checkName=$(perl-rename -v "${i}" "$newName")
            if [[ ! -z "$checkName" ]]; then
                newName=${checkName##* }
            fi
        done
        if [[ ! -z "$2" ]]; then
            eval "$2=${newName}"
        fi
    fi
}


function main() {
    if (( UID == 0 )); then
        echo "you're using way too much priviledge for renaming files. not allowed."
    else
        if [[ -d "$1" ]]; then
            rename_with_patterns "$1" DIR
            if [[ ! -z "$DIR" ]]; then
                for file in ${DIR}/*; do
                    rename_with_patterns "$file"
                done
            fi
        elif [[ -f "$1" ]]; then
            rename_with_patterns "$1"
        fi
    fi
}


##------------------------------------------------------------------------------
## end of functions
##------------------------------------------------------------------------------

param=$(realpath "$1")
if [[ "${param}" == "/" ]]; then
    echo "not going to rename from / .Try somewhere else."
else
    main "$param"
fi
